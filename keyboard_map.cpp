#include "keyboard_map.h"
#include <unordered_map>
#include <string>

std::string ConvertToKL(const std::string& input)
{
    static const std::unordered_map<char, char> ConvertToKL = {
                {'é', 'q'}, {'ö', 'w'}, {'ó', 'e'}, {'ê', 'r'}, {'å', 't'}, {'í', 'y'},
        {'ã', 'u'}, {'ø', 'i'}, {'ù', 'o'}, {'ç', 'p'}, {'õ', '['}, {'ú', ']'},
        {'ô', 'a'}, {'û', 's'}, {'â', 'd'}, {'à', 'f'}, {'ï', 'g'}, {'ð', 'h'},
        {'î', 'j'}, {'ë', 'k'}, {'ä', 'l'}, {'æ', ';'}, {'ý', '\''},
        {'ÿ', 'z'}, {'÷', 'x'}, {'ñ', 'c'}, {'ì', 'v'}, {'è', 'b'}, {'ò', 'n'},
        {'ü', 'm'}, {'á', ','}, {'þ', '.'},
        {'¸', '`'},
        {'É', 'Q'}, {'Ö', 'W'}, {'Ó', 'E'}, {'Ê', 'R'}, {'Å', 'T'}, {'Í', 'Y'},
        {'Ã', 'U'}, {'Ø', 'I'}, {'Ù', 'O'}, {'Ç', 'P'}, {'Õ', '{'}, {'Ú', '}'},
        {'Ô', 'A'}, {'Û', 'S'}, {'Â', 'D'}, {'À', 'F'}, {'Ï', 'G'}, {'Ð', 'H'},
        {'Î', 'J'}, {'Ë', 'K'}, {'Ä', 'L'}, {'Æ', ':'}, {'Ý', '"'},
        {'ß', 'Z'}, {'×', 'X'}, {'Ñ', 'C'}, {'Ì', 'V'}, {'È', 'B'}, {'Ò', 'N'},
        {'Ü', 'M'}, {'Á', '<'}, {'Þ', '>'},
        {'¨', '~'},
        {'q', 'é'}, {'w', 'ö'}, {'e', 'ó'}, {'r', 'ê'}, {'t', 'å'}, {'y', 'í'},
        {'u', 'ã'}, {'i', 'ø'}, {'o', 'ù'}, {'p', 'ç'}, {'[', 'õ'}, {']', 'ú'},
        {'a', 'ô'}, {'s', 'û'}, {'d', 'â'}, {'f', 'à'}, {'g', 'ï'}, {'h', 'ð'},
        {'j', 'î'}, {'k', 'ë'}, {'l', 'ä'}, {';', 'æ'}, {'\'', 'ý'},
        {'z', 'ÿ'}, {'x', '÷'}, {'c', 'ñ'}, {'v', 'ì'}, {'b', 'è'}, {'n', 'ò'},
        {'m', 'ü'}, {',', 'á'}, {'.', 'þ'}, {'`', '¸'}, {'~', '¨'},
        {'Q', 'É'}, {'W', 'Ö'}, {'E', 'Ó'}, {'R', 'Ê'}, {'T', 'Å'}, {'Y', 'Í'},
        {'U', 'Ã'}, {'I', 'Ø'}, {'O', 'Ù'}, {'P', 'Ç'}, {'{', 'Õ'}, {'}', 'Ú'},
        {'A', 'Ô'}, {'S', 'Û'}, {'D', 'Â'}, {'F', 'À'}, {'G', 'Ï'}, {'H', 'Ð'},
        {'J', 'Î'}, {'K', 'Ë'}, {'L', 'Ä'}, {':', 'Æ'}, {'"', 'Ý'},
        {'Z', 'ß'}, {'X', '×'}, {'C', 'Ñ'}, {'V', 'Ì'}, {'B', 'È'}, {'N', 'Ò'},
        {'M', 'Ü'}
    };
    std::string result;
    for (char c : input)
    {
        auto let = ConvertToKL.find(c);
        if (let != ConvertToKL.end())
            result += let->second;
        else
            result += c;
    }
    return result;
}